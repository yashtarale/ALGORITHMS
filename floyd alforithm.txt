Develop a program to implement floyd alforithm which will produce the shortest distance between all vertex pair of weighted graph.
let G = <N,A> be a directed graph
N -> Set of Node
A -> Set of Edge
Each edge has an associated non-negative length & we calculate shortest path between each pair of node

function floyd(L[1:n][1:n] : array[1:n][1:n] 
               [1:n] arrayD[1:n][1:n])
    arrayD ← L;
    for k ← 1 to n do
        for i ← 1 to n do
            for j ← 1 to n do
                D[i][j] = min(D[i][j], D[i][k]+[k][j])
                return D;
Program
#include <stdio.h>
int min(int a, int b){
    if(a<b)
        return(a);
    else
        return(b);
}

void floyd(int d[10][10],int n){
    int i,j,k;
    for (k=1;k<=n;k++)
        for(i=1;i<=n;i++)
            for(j=1;j<=n;j++)
                d[i][j]=min(d[i][j],d[i][k]+d[k][j]);
}

int main()
{
    int i,j,k,n,a[10][10],d[10][10];
    printf("Enter number of virtices: ");
    scanf("%d",&n);
   
    printf("Enter values or mattrix: \n");
    printf("Enter 0 for self loop and 999 for node with no value:\n");
   
    for(i=1;i<=n;i++){
        for(j=1;j<=n;j++){
            scanf("%d",&a[i][j]);
            d[i][j]=a[i][j];
        }
    }
   
    floyd(d,n);
   
    printf("All pairs shortest path :\n");
    for(int i=1;i<=n;i++){
        for (j=1;j<=n;j++)
            printf("%d\t",d[i][j]);
        printf("\n");
       
    }

    return 0;
}
O/P:
    Enter number of virtices: 3
    Enter values or mattrix: 
    Enter 0 for self loop and 999 for node with no value:
    0 4 11
    6 0 2
    3 999 0
    All pairs shortest path :
    0  4  6
    5  0  2
    3  7  0