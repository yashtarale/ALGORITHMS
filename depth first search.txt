Develop a program to print all the node reachable a given shorting node in diagram using depth first search
procedure dfSearch(G)
    for each V € N do
        mark[v] ← not visited
    for each V € N do
        if mark[v] ≠ visited then
            dfs(v)
        end_if
    end_for
end_procedure


procedure dfs(v)
    {node v has not visited previously}
    mark[v] ← visited
    for each node w adjacent to v do
        if mark[v] ≠ visited then
            dfs(v)
        end_if
    end_for
end_procedure
Program
#include<stdio.h>
int reach[20],mat[20][20],n;
void DFS(int v)
{
    int i;
    reach[v] = 1;
    for(i=1;i<=n;i++)
        if(mat[v][i] && !reach[i])
        {
            printf("%d => %d\n",v,i);
            DFS(i);
        }
}
int main()
{
    int count=0;
    printf("Enter the number of vertices: ");
    scanf("%d", &n);

    for (int i = 1; i <= n;i++)
        for (int j = 1; j <= n; j++)
            mat[i][j] = 0;

    for (int i = 1; i <= n;i++)
        for (int j = 1; j <= n; j++)
            scanf("%d", &mat[i][j]);

    DFS(1);
    printf("\n");
    for (int i=1;i<=n;i++) {
        if(reach[i])
            count++;
}
    if(count==n)
        printf("\n Graph is connected"); 
    else
        printf("\n Graph is not connected");
}
O/P:    
    Enter the number of vertices: 6
    0 1 0 1 0 0
    0 0 1 0 1 0
    0 0 0 0 1 1
    0 1 0 0 0 0
    0 0 0 0 0 0
    0 0 0 0 0 1

    1 => 2
    2 => 3
    3 => 5
    3 => 6
    1 => 4


    Graph is connected
